#!/usr/bin/python
"""TODO doc"""
import re
import os
import time
from functions import parseArgs
from functions import dropObj
from functions import querySchedd
from functions import getSchedds
from functions import rrdUpdate
from functions import createEmptyRRD

GSTARTUP = int(time.time())


def analyzeScheddOutput(ad, workflows, taskInfo):
    """ TODO doc """
    keys = ["CRAB_UserHN", "CRAB_ReqName", "ClusterId", "RequestMemory", 'RequestCpus', "MaxWallTimeMins",
            "JobStatus", "TaskType", "DESIRED_Sites", "MATCH_EXP_JOBGLIDEIN_CMSSite",
            "CRAB_UserWebDir", "JobPrio", "DAG_NodesReady", "DAG_NodesUnready",
            "DAG_NodesTotal", "DAG_NodesFailed", "DAG_NodesDone", "QDate"]
    jobs = querySchedd(ad, "CRAB_ReqName isnt null", keys)
    for job in jobs:
        request = re.sub('[:]', '', job['CRAB_UserHN'])
        mainTaskName = job['CRAB_ReqName']
        subTask = re.sub('[:]', '', mainTaskName)
        if 'DESIRED_Sites' not in job.keys() or \
           ('DESIRED_Sites' in job.keys() and job['DESIRED_Sites'] == 'undefined'):
            # means main task.
            mainUserInfo = taskInfo.setdefault(request, {})
            mainUserTask = mainUserInfo.setdefault(subTask, {})
            mainUserTask['Schedd'] = ad['Name']
            mainUserTask['QDate'] = job['QDate']
            mainUserTask['TaskName'] = mainTaskName
            keysFromMainTask = ['CRAB_UserWebDir', 'DAG_NodesTotal', 'DAG_NodesReady', 'DAG_NodesUnready', "RequestCpus",
                                'DAG_NodesFailed', 'DAG_NodesDone', 'RequestMemory', 'MaxWallTimeMins', 'JobStatus']
            for keyName in keysFromMainTask:
                if keyName in job.keys():
                    mainUserTask[keyName] = job[keyName]
            if 'JobStatus' in mainUserTask and mainUserTask['JobStatus'] == 5:
                mainUserTask['DagNodesWasReady'] = mainUserTask.get('DAG_NodesReady', 0)
                mainUserTask['DAG_NodesReady'] = 0
            # Prepare summary of running,idle,notqueued
            continue

        desiredSites = []
        try:
            desiredSites = job['DESIRED_Sites'].split(",")
        except:
            desiredSites = []
        desiredSites.sort()
        desiredSites = tuple(desiredSites)
        runningSite = job.get("MATCH_EXP_JOBGLIDEIN_CMSSite")
        if job["JobStatus"] == 1:
            status = "MatchingIdle"
        elif job["JobStatus"] == 2:
            status = "Running"
        else:
            continue
        requestDict = workflows.setdefault(request, {})
        subtaskDict = requestDict.setdefault(subTask, {})
        summaryDict = subtaskDict.setdefault('Summary', {})
        summaryInternal = summaryDict.setdefault("Internal", {})
        prio = 10
        jobinfo = (prio, desiredSites)
        if not runningSite:
            summaryInternal.setdefault(jobinfo, 0)
            summaryInternal[jobinfo] += 1
        for site in desiredSites:
            siteDict = subtaskDict.setdefault(site, {})
            prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
            prioDict.setdefault(status, 0)
            if status != "Running":
                prioDict[status] += 1
                if len(desiredSites) == 1 and not runningSite:
                    prioDict['UniquePressure'] += 1
        if runningSite:
            siteDict = subtaskDict.setdefault(runningSite, {})
            prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
            prioDict.setdefault(status, 0)
            prioDict[status] += 1


def summarize(workflows, gsites, tasks, siteview):
    """ TODO doc  """
    for request, requestDict in workflows.items():
        for subtask, subtaskDict in requestDict.items():
            sites = subtaskDict.keys()
            idle = sum(subtaskDict.get("Summary", {}).get("Internal", {}).values())
            taskinfo = tasks.get(request, {}).get(subtask, {})
            notQueued = int(tasks.get(request, {}).get(subtask, {}).get("DAG_NodesTotal", 0))
            running = 0
            minPrio = 0
            uniq = 0
            for siteDict in subtaskDict.values():
                for prioDict in siteDict.values():
                    running += prioDict.get("Running", 0)
                    uniq += prioDict.get("UniquePressure", 0)
            notQueued -= max([(notQueued - (idle + running)), 0])
            totalJobs = notQueued + idle + running
            subtaskDict["Summary"].update({"Running": running,
                                           "Idle": idle,
                                           "UniquePressure": uniq,
                                           "notQueued": notQueued,
                                           "Total": totalJobs,
                                           "TaskInfo": taskinfo})

        sites = set()
        for subtaskDict in requestDict.values():
            for site, siteDict in subtaskDict.items():
                if minPrio in siteDict:
                    sites.add(site)
        running = sum([subtaskDict["Summary"]["Running"] for subtaskDict in requestDict.values()])
        idle = sum([subtaskDict["Summary"]["Idle"] for subtaskDict in requestDict.values()])
        uniq = sum([subtaskDict["Summary"]["UniquePressure"] for subtaskDict in requestDict.values()])
        total = running + idle
        requestDict["Summary"] = {"Running": running,
                                  "Idle": idle,
                                  "UniquePressure": uniq,
                                  "Total": total}

        requestSites = requestDict["Summary"].setdefault("Sites", {})
        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                requestSites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
                for key in requestSites[site]:
                    requestSites[site][key] += sum([prioDict[key] for prioDict in siteDict.values()])

        for site, siteDict in requestSites.items():
            gsitesDict = gsites.setdefault(site, {})
            gsitesDict.setdefault(request, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, 'MatchingSites': len(requestSites)})
            for status, dummycount in siteDict.items():
                gsitesDict[request][status] += siteDict[status]

    running, idle, uniq = 0, 0, 0
    # This has to go to summarize
    for requestDict in workflows.values():
        for site, siteDict in requestDict["Summary"]["Sites"].items():
            siteview.setdefault(site, {"Running": 0, "MatchingIdle": 0, "RequestCount": 0, "UniquePressure": 0})
            siteview[site]["Running"] += siteDict["Running"]
            siteview[site]["MatchingIdle"] += siteDict["MatchingIdle"]
            siteview[site]["RequestCount"] += 1
            siteview[site]["UniquePressure"] += siteDict["UniquePressure"]
        running += requestDict["Summary"]["Running"]
        idle += requestDict["Summary"]["Idle"]
        uniq += requestDict["Summary"]["UniquePressure"]
    siteview['Summary'] = {"Running": running, "MatchingIdle": idle, "UniquePressure": uniq}


def writeJson(workflows, gsites, taskInfo, output, sitesview):
    """ TODO doc """
    requests = len(workflows)
    now = int(time.time())
    dropObj(sitesview, output, "site_summary.json")

    # Count total Not Queued jobs
    # This has to go to summarize
    notQueued = 0
    taskCountR = 0
    taskCountH = 0
    # This also has to move to summarize
    for dummyuser, userDict in taskInfo.items():
        for subtask, subtaskDict in userDict.items():
            notQueued += subtaskDict.get('DAG_NodesReady', 0)
            if 'JobStatus' in subtaskDict.keys():
                if subtaskDict['JobStatus'] == 5:
                    taskCountH += 1
                elif subtaskDict['JobStatus'] == 2:
                    taskCountR += 1
    dropObj({"Running": sitesview['Summary']['Running'], "Idle": sitesview['Summary']['MatchingIdle'], "UniquePressure": sitesview['Summary']['UniquePressure'],
             "RequestCount": requests, "UpdateTime": now, "NotQueued": notQueued, "TaskCountR": taskCountR, "TaskCountH": taskCountH}, output, "totals.json")

    for site, siteDict in gsites.items():
        if site:
            siteDir = os.path.join(output, site)
            finalObj = dict(sitesview[site])
            finalObj["UpdateTime"] = now
            dropObj(finalObj, siteDir, "totals.json")
            dropObj(siteDict, siteDir, "summary.json")

    finalObj = {}
    for request, requestDict in workflows.items():
        finalObj[request] = dict(requestDict["Summary"])
        finalObj[request]["SiteCount"] = len(finalObj[request]["Sites"])
        finalObj[request]["TaskCount"] = len(requestDict)-1
        del finalObj[request]["Sites"]
        requestSummary = dict(finalObj[request])
        requestSummary['UpdateTime'] = now
        requestSummary['SubtaskCount'] = len(requestDict)-1
        dropObj(requestSummary, os.path.join(output, request), "totals.json")
    dropObj(finalObj, output, "summary.json")

    for request, requestDict in workflows.items():
        finalObj = {}
        requestSites = {}
        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            finalObj[subtask] = subtaskDict["Summary"]
            sites = subtaskDict.keys()
            sites.remove("Summary")
            # final_obj["SiteCount"] = len(sites)

            sites = {}
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                sites[site] = {"Running": sum(prioDict["Running"] for prioDict in siteDict.values()),
                               "MatchingIdle": sum(prioDict["MatchingIdle"] for prioDict in siteDict.values())}
            subtaskDir = os.path.join(output, request, subtask)
            dropObj(sites, subtaskDir, "site_summary.json")
            for site, siteDict in sites.items():
                requestSites.setdefault(site, {"Running": 0, "MatchingIdle": 0})
                for status, count in siteDict.items():
                    requestSites[site][status] += count
            subtaskDict["Summary"]["SiteCount"] = len(sites)
            out = subtaskDict["Summary"]
            out["Sites"] = sites.keys()
            dropObj(out, subtaskDir, "summary.json")
        requestDir = os.path.join(output, request)
        dropObj(requestSites, requestDir, "site_summary.json")
        dropObj(finalObj, requestDir, "summary.json")


def writeRrds(workflows, gsites, output, sitesview):
    """ TODO doc """
    createEmptyRRD(output, GSTARTUP)
    fname = os.path.join(output, "summary.rrd")
    # Create summary RRD which is shown in top.
    tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:UniquePressure:GAUGE:360:U:U"]
    tempUpdLine = "%d:%d:%d:%d" % (GSTARTUP, sitesview['Summary']['Running'],
                                   sitesview['Summary']['MatchingIdle'],
                                   sitesview['Summary']['UniquePressure'])
    rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
    # For all calculated sites, make graphs
    for site, siteDict in sitesview.items():
        if site == 'Summary':
            continue
        fname = os.path.join(output, "%s.rrd" % site)
        tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U", "DS:UniquePressure:GAUGE:360:U:U"]
        tempUpdLine = "%d:%d:%d:%d" % (GSTARTUP, siteDict['Running'], siteDict['MatchingIdle'], siteDict['UniquePressure'])
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for site, siteDict in gsites.items():
        siteDir = os.path.join(output, site)
        for request, requestDict in siteDict.items():
            fname = os.path.join(siteDir, "%s.rrd" % request)
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U"]
            tempUpdLine = "%d:%d:%d" % (GSTARTUP, requestDict["Running"], requestDict["MatchingIdle"])
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for request, requestDict in workflows.items():
        requestDir = os.path.join(output, request)
        fname = os.path.join(requestDir, "request.rrd")
        tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U"]
        tempUpdLine = "%d:%d:%d" % (GSTARTUP, requestDict["Summary"]["Running"], requestDict["Summary"]["Idle"])
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

        for site, siteDict in requestDict["Summary"]["Sites"].items():
            fname = os.path.join(requestDir, "%s.rrd" % site)
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U"]
            tempUpdLine = "%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MatchingIdle"])
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            subtaskDir = os.path.join(requestDir, subtask)
            fname = os.path.join(subtaskDir, "subtask.rrd")
            stats = subtaskDict["Summary"]["Running"], subtaskDict["Summary"]["Idle"]
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U"]
            tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

            # for site, siteDict in subtaskDict.items():
            #    if site == "Summary":
            #        continue
            #    fname = os.path.join(subtaskDir, "%s.rrd" % site)
            #    if not os.path.exists(fname):
            #        rrdtool.create(fname,
            #                       "--step", "180",
            #                       "DS:Running:GAUGE:360:U:U",
            #                       "DS:MatchingIdle:GAUGE:360:U:U",
            #                       "RRA:AVERAGE:0.5:1:1000",
            #                       "RRA:AVERAGE:0.5:20:2000",)
            #    stats = sum(prioDict["Running"] for prioDict in siteDict.values()), \
            #        sum(prioDict["MatchingIdle"] for prioDict in siteDict.values())
            #    updateRrd(fname, (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats)


def main():
    """Main function for prod"""
    opts, dummyargs = parseArgs()

    scheddAds, dummycoll = getSchedds(opts, opts.pool, 'CMSGWMS_Type=?="crabschedd"', ['Name', 'MyAddress', 'ScheddIpAddr'])

    sites = {}
    workflows = {}
    taskInfo = {}
    sitesview = {}
    for ad in scheddAds:
        print "Querying schedd", ad['Name']
        analyzeScheddOutput(ad, workflows, taskInfo)

    # analyze_prios(workflows)
    summarize(workflows, sites, taskInfo, sitesview)

    # This is nice, but need to change to be debugging and option to debug.
    # TODO: change this to proint only then DEBUG
    for dummyrequest, requestDict in workflows.items():
        # print "- Info for request", request
        # print requestDict["Summary"]
        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            # print "\t- Info for subtask", subtask
            del subtaskDict["Summary"]["Internal"]
            # print "\t", subtaskDict["Summary"]
            # for site, siteDict in subtaskDict.items():
            #    if site == "Summary":
            #        continue
            #    print "\t\t- Site", site
            #    for prio, prioDict in siteDict.items():
            #        print "\t\t\t- Prio", prio
            #        for status, count in prioDict.items():
            #            print "\t\t\t\t- %s: %d" % (status, count)

    if opts.analysisview:
        writeJson(workflows, sites, taskInfo, opts.analysisview, sitesview)
        writeRrds(workflows, sites, opts.analysisview, sitesview)

if __name__ == "__main__":
    main()
