#!/usr/bin/python
"""TODO"""
import os
import time
from functions import parseArgs
from functions import dropObj
from functions import querySchedd
from functions import validateInt
from functions import getSchedds
from functions import rrdUpdate
from functions import createEmptyRRD

GSTARTUP = int(time.time())
def analyzeScheddOutput(ad, workflows, taskInfo):
    """
    Main function which gets all information from schedds
    and does some magic with adding this information to dictionary
    """
    jobs = querySchedd(ad, "WMAgent_RequestName isnt null && WMAgent_SubTaskName isnt null && JobPrio isnt null && DESIRED_Sites isnt null",
                       ["WMAgent_RequestName", "WMAgent_SubTaskName", "DESIRED_Sites", "MATCH_EXP_JOBGLIDEIN_CMSSite",
                        "JobPrio", "JobStatus", "RequestMemory", "MaxWallTimeMins", "RequestCpus"])
    for job in jobs:
        request = job['WMAgent_RequestName']
        subTask = job['WMAgent_SubTaskName'].split("/")[-1]
        desiredSites = ""
        strDes = ""
        try:
            desiredSites = job['DESIRED_Sites'].split(",")
            strDes = job['DESIRED_Sites']
        except AttributeError:
            desiredSites = job['DESIRED_Sites'].eval()
            strDes = desiredSites
            desiredSites = desiredSites.split(",")
        desiredSites.sort()
        desiredSites = tuple(desiredSites)
        runningSite = job.get("MATCH_EXP_JOBGLIDEIN_CMSSite")
        if job["JobStatus"] == 1:
            status = "MatchingIdle"
        elif job["JobStatus"] == 2:
            status = "Running"
        else:
            continue
        prio = job["JobPrio"]
        priorityDict = taskInfo.setdefault("Summary", {})
        prioPriorityDict  = priorityDict.setdefault(int(prio), {"Running": 0, "Idle": 0})
        requestDict = workflows.setdefault(request, {})
        subtaskDict = requestDict.setdefault(subTask, {})
        summaryDict = subtaskDict.setdefault('Summary', {})
        summaryInternal = summaryDict.setdefault("Internal", {})

        mainTaskInfo = taskInfo.setdefault(request, {})
        mainSubTask = mainTaskInfo.setdefault(subTask, {})
        memory = 0 if 'RequestMemory' not in job.keys() else validateInt(job['RequestMemory'])
        walltime = 0 if 'MaxWallTimeMins' not in job.keys() else validateInt(job['MaxWallTimeMins'])
        requestCpus = 0 if 'RequestCpus' not in job.keys() else validateInt(job['RequestCpus'])
        key = "||".join([str(memory), str(requestCpus), str(walltime), str(strDes), ad['Name']])
        mainSubTaskdebug = mainSubTask.setdefault(key, {"Idle": 0, "Running": 0, "DesiredSites": '', 'WallTime': walltime, 'Memory': memory, 'Schedd': '', 'Cpus': requestCpus})
        mainSubTaskdebug['Schedd'] = ad['Name']
        mainSubTaskdebug['Memory'] = memory
        mainSubTaskdebug['WallTime'] = walltime
        mainSubTaskdebug['Cpus'] = requestCpus
        mainSubTaskdebug['DesiredSites'] = strDes
        if job['JobStatus'] == 2:
            mainSubTaskdebug['Running'] += 1
            prioPriorityDict['Running'] += 1
        elif job['JobStatus'] == 1:
            mainSubTaskdebug['Idle'] += 1
            prioPriorityDict['Idle'] += 1

        jobinfo = (prio, desiredSites)
        if not runningSite:
            summaryInternal.setdefault(jobinfo, 0)
            summaryInternal[jobinfo] += 1
        for site in desiredSites:
            siteDict = subtaskDict.setdefault(site, {})
            prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
            prioDict.setdefault(status, 0)
            if status != "Running":
                prioDict[status] += 1
                if len(desiredSites) == 1 and not runningSite:
                    prioDict['UniquePressure'] += 1
        if runningSite:
            siteDict = subtaskDict.setdefault(runningSite, {})
            prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
            prioDict.setdefault(status, 0)
            prioDict[status] += 1


def analyzePriosInner(workflows, sites, prio):
    """ Analyze priorities and this gives view of lower/higher running """
    # TODO: IMPROVE IT!!!!!
    # This analyze prios takes too much time to complete
    # when a lot of load is from production.
    # Need to take a look where to improve this.
    return 0, 0
#    higher_idle = 0
#    lower_running = 0
#    sites = set(sites)
#    if not sites:
#        return 0, 0
#    for request, request_dict in workflows.items():
#        for subtask, subtask_dict in request_dict.items():
#            for running_site, site_dict in subtask_dict.items():
#                if running_site == "Summary" and site_dict.get("Internal"):
#                    for jobinfo, jobs in site_dict["Internal"].items():
#                        idle_prio, desired_sites = jobinfo
#                        desired_sites = set(desired_sites)
#                        if (sites.intersection(desired_sites)) and idle_prio > prio:
#                            higher_idle += jobs
#                elif running_site in sites:
#                    for running_prio, prio_dict in site_dict.items():
#                        if running_prio >= prio:
#                            continue
#                        for status, count in prio_dict.items():
#                            if status != "Running":
#                                continue
#                            lower_running += count
#    return higher_idle, lower_running


def analyzePrios(workflows):
    """ Analyse priorities for workflows """
    for dummyrequest, requestDict in workflows.items():
        for dummysubtask, subtaskDict in requestDict.items():
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                for dummyprio, prioDict in siteDict.items():
                    higherIdle, lowerRunning = 0, 0  # analyze_prios_inner(workflows, [site], prio)
                    prioDict["LowerPrioRunning"] = lowerRunning
                    prioDict["HigherPrioIdle"] = higherIdle


def summarize(workflows, gsites, tasks):
    """ Summarize running, idle, lower, higher run/idle, prios..."""
    for request, requestDict in workflows.items():
        for subtask, subtaskDict in requestDict.items():
            minPrio = min([min(siteDict.keys()) for siteDict in subtaskDict.values()])
            sites = subtaskDict.keys()
            taskinfo = tasks.get(request, {}).get(subtask, {})
            higherIdle, lowerRunning = analyzePriosInner(workflows, sites, minPrio)
            idle = sum(subtaskDict.get("Summary", {}).get("Internal", {}).values())
            running = 0
            uniq = 0
            for siteDict in subtaskDict.values():
                for prioDict in siteDict.values():
                    running += prioDict.get("Running", 0)
                    uniq += prioDict.get("UniquePressure", 0)
            subtaskDict["Summary"].update({"BasePrio": minPrio, "Running": running, "Idle": idle,
                                           "HigherPrioIdle": higherIdle, "LowerPrioRunning": lowerRunning,
                                           "TaskInfo": taskinfo, "UniquePressure": uniq})

        minPrio = int(min([float(subtaskDict["Summary"]["BasePrio"]) for subtaskDict in requestDict.values()]))
        minPrio %= 10000000
        sites = set()
        for subtaskDict in requestDict.values():
            for site, siteDict in subtaskDict.items():
                if minPrio in siteDict:
                    sites.add(site)
        running = sum([subtaskDict["Summary"]["Running"] for subtaskDict in requestDict.values()])
        idle = sum([subtaskDict["Summary"]["Idle"] for subtaskDict in requestDict.values()])
        higherIdle, lowerRunning = analyzePriosInner(workflows, sites, minPrio)
        uniq = sum([subtaskDict["Summary"]["UniquePressure"] for subtaskDict in requestDict.values()])
        requestDict["Summary"] = {"BasePrio": minPrio, "Running": running, "Idle": idle,
                                  "HigherPrioIdle": higherIdle, "LowerPrioRunning": lowerRunning,
                                  "UniquePressure": uniq}

        requestSites = requestDict["Summary"].setdefault("Sites", {})
        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                requestSites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
                for key in requestSites[site]:
                    requestSites[site][key] += sum([prioDict[key] for prioDict in siteDict.values()])

        for site, siteDict in requestSites.items():
            gsitesDict = gsites.setdefault(site, {})
            gsitesDict.setdefault(request, {"Running": 0, "MatchingIdle": 0, "BasePrio": minPrio,
                                            'MatchingSites': len(requestSites), "UniquePressure": 0})
            for status, dummycount in siteDict.items():
                gsitesDict[request][status] += siteDict[status]

    newTasksDict = {}
    mappings = {63000: "B6", 70000: "B5", 80000: "B4", 85000: "B3", 90000: "B2", 110000: "B1"}
    mappingsView = {"B7": "Low Priority", "B6": "Block 6 (63k)", "B5": "Block 5 (70k)", "B4": "Block 4 (80k)", "B3": "Block 3 (85k)", "B2": "Block 2 (90k)", "B1": "Block 1 (110k)", "B0": "High Priority"}
    for prio in tasks['Summary']:
        name = None
        if prio in mappings:
            name = mappings[prio]
        else:
            name = 'B7' if prio < 63000 else 'B0'
        newTasksDict.setdefault(name, {"Running": 0, "Idle": 0})
        for key in tasks['Summary'][prio]:
            newTasksDict[name][key] += tasks['Summary'][prio][key]
    newTasksDict['Keys'] = mappingsView
    tasks['Summary'] = newTasksDict



def writeJson(workflows, gsites, output, taskInfo):
    """
    Write json output for monitoring
    """
    sites = {}
    running, idle, uniq = 0, 0, 0
    for requestDict in workflows.values():
        for site, siteDict in requestDict["Summary"]["Sites"].items():
            sites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "RequestCount": 0, "UniquePressure": 0})
            sites[site]["Running"] += siteDict["Running"]
            sites[site]["MatchingIdle"] += siteDict["MatchingIdle"]
            sites[site]["RequestCount"] += 1
            sites[site]["UniquePressure"] += siteDict["UniquePressure"]
        running += requestDict["Summary"]["Running"]
        idle += requestDict["Summary"]["Idle"]
        uniq += requestDict["Summary"]["UniquePressure"]
    requests = len(workflows)

    now = int(time.time())

    dropObj(sites, output, "site_summary.json")
    dropObj({"Running": running, "Idle": idle, "RequestCount": requests, "UniquePressure": uniq, "Priorities": taskInfo['Summary'], "UpdateTime": now}, output, "totals.json")

    for site, siteDict in gsites.items():
        siteDir = os.path.join(output, site)
        finalObj = dict(sites[site])
        finalObj["UpdateTime"] = now
        dropObj(finalObj, siteDir, "totals.json")
        dropObj(siteDict, siteDir, "summary.json")

    finalObj = {}
    for request, requestDict in workflows.items():
        finalObj[request] = dict(requestDict["Summary"])
        finalObj[request]["SiteCount"] = len(finalObj[request]["Sites"])
        del finalObj[request]["Sites"]
        requestSummary = dict(finalObj[request])
        requestSummary['UpdateTime'] = now
        requestSummary['SubtaskCount'] = len(requestDict)-1
        dropObj(requestSummary, os.path.join(output, request), "totals.json")
    dropObj(finalObj, output, "summary.json")

    for request, requestDict in workflows.items():
        finalObj = {}
        requestSites = {}
        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            finalObj[subtask] = subtaskDict["Summary"]
            sites = subtaskDict.keys()
            sites.remove("Summary")
            # final_obj["SiteCount"] = len(sites)

            sites = {}
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                sites[site] = {"Running":      sum(prioDict["Running"] for prioDict in siteDict.values()),
                               "MatchingIdle": sum(prioDict["MatchingIdle"] for prioDict in siteDict.values())}
            subtaskDir = os.path.join(output, request, subtask)
            dropObj(sites, subtaskDir, "site_summary.json")
            for site, siteDict in sites.items():
                requestSites.setdefault(site, {"Running": 0, "MatchingIdle": 0})
                for status, count in siteDict.items():
                    requestSites[site][status] += count
            subtaskDict["Summary"]["SiteCount"] = len(sites)
            out = subtaskDict["Summary"]
            out["Internal"] = {}
            out["Sites"] = sites.keys()
            dropObj(out, subtaskDir, "summary.json")
        requestDir = os.path.join(output, request)
        dropObj(requestSites, requestDir, "site_summary.json")
        dropObj(finalObj, requestDir, "summary.json")


def writeRrds(workflows, gsites, output, taskInfo):
    """
    Create all rrds or update existing ones.
    """
    createEmptyRRD(output, GSTARTUP)
    sites = {}
    running, idle, uniq = 0, 0, 0
    # Update for priorities graph.
    # This idealy shows in which status are more jobs (idle/running) compared to priority
    # ----------------------------------------------------------------
    for key in ['Running', 'Idle']:
        fname = os.path.join(output, "priorities-%s.rrd" % key.lower())
        tempKeys = ["DS:R%s:GAUGE:360:U:U" % x for x in range(0,8)]
        stats = tuple([taskInfo['Summary'][x][key] if x in taskInfo['Summary'] and key in taskInfo['Summary'][x] else 0 for x in sorted(taskInfo["Summary"]["Keys"])])
        tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
    # ----------------------------------------------------------------

    for requestDict in workflows.values():
        for site, siteDict in requestDict["Summary"]["Sites"].items():
            sites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0})
            sites[site]["Running"] += siteDict["Running"]
            sites[site]["MatchingIdle"] += siteDict["MatchingIdle"]
            sites[site]["UniquePressure"] += siteDict["UniquePressure"]
        running += requestDict["Summary"]["Running"]
        idle += requestDict["Summary"]["Idle"]
        uniq += requestDict["Summary"]["UniquePressure"]
    fname = os.path.join(output, "summary.rrd")
    tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:UniquePressure:GAUGE:360:U:U"]
    tempUpdLine = "%d:%d:%d:%d" % (GSTARTUP, running, idle, uniq)
    rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for site, siteDict in sites.items():
        fname = os.path.join(output, "%s.rrd" % site)
        tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U"]
        tempUpdLine = "%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MatchingIdle"])
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for site, siteDict in gsites.items():
        siteDir = os.path.join(output, site)
        for request, requestDict in siteDict.items():
            fname = os.path.join(siteDir, "%s.rrd" % request)
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U"]
            tempUpdLine = "%d:%d:%d" % (GSTARTUP, requestDict["Running"], requestDict["MatchingIdle"])
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for request, requestDict in workflows.items():
        requestDir = os.path.join(output, request)
        fname = os.path.join(requestDir, "request.rrd")
        tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:HigherPrioIdle:GAUGE:360:U:U", "DS:LowerPrioRunning:GAUGE:360:U:U"]
        stats = requestDict["Summary"]["Running"], requestDict["Summary"]["Idle"], \
            requestDict["Summary"]["HigherPrioIdle"], requestDict["Summary"]["LowerPrioRunning"]
        tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

        for site, siteDict in requestDict["Summary"]["Sites"].items():
            fname = os.path.join(requestDir, "%s.rrd" % site)
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U"]
            tempUpdLine = "%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MatchingIdle"])
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            subtaskDir = os.path.join(requestDir, subtask)
            fname = os.path.join(subtaskDir, "subtask.rrd")
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:HigherPrioIdle:GAUGE:360:U:U", "DS:LowerPrioRunning:GAUGE:360:U:U"]
            stats = subtaskDict["Summary"]["Running"], subtaskDict["Summary"]["Idle"], \
                subtaskDict["Summary"]["HigherPrioIdle"], subtaskDict["Summary"]["LowerPrioRunning"]
            tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                fname = os.path.join(subtaskDir, "%s.rrd" % site)
                tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U", "DS:HigherPrioIdle:GAUGE:360:U:U", "DS:LowerPrioRunning:GAUGE:360:U:U"]
                stats = sum(prioDict["Running"] for prioDict in siteDict.values()), \
                    sum(prioDict["MatchingIdle"] for prioDict in siteDict.values()), \
                    sum(prioDict["HigherPrioIdle"] for prioDict in siteDict.values()), \
                    sum(prioDict["LowerPrioRunning"] for prioDict in siteDict.values())
                tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
                rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)


def main():
    """ Main prodview function """
    opts, dummyargs = parseArgs()
    scheddAds, dummycoll = getSchedds(opts, opts.pool, 'CMSGWMS_Type=?="prodschedd"', ['Name', 'MyAddress', 'ScheddIpAddr'])

    sites = {}
    workflows = {}
    taskInfo = {}
    for ad in scheddAds:
        print "Querying schedd", ad['Name']
        analyzeScheddOutput(ad, workflows, taskInfo)

    analyzePrios(workflows)
    summarize(workflows, sites, taskInfo)

    if opts.prodview:
        writeJson(workflows, sites, opts.prodview, taskInfo)
        writeRrds(workflows, sites, opts.prodview, taskInfo)

if __name__ == "__main__":
    main()
