#!/usr/bin/python
""" TODO doc """
import re
import os
import sys
import json
import time
import optparse
import ConfigParser
import urllib2
import xml.etree.ElementTree as ET
import rrdtool
import htcondor
import classad

GSTARTUP = int(time.time())


def parseArgs():
    """TODO move it from here"""
    parser = optparse.OptionParser()
    parser.add_option("-c", "--config", help="Prodview configuration file", dest="config", default=None)
    parser.add_option("-p", "--pool", help="HTCondor pool to analyze", dest="pool")
    parser.add_option("-o", "--output", help="Top-level output dir", dest="output")
    opts, args = parser.parse_args()

    if args:
        parser.print_help()
        print >> sys.stderr, "%s takes no arguments." % args[0]
        sys.exit(1)

    cp = ConfigParser.ConfigParser()
    if opts.config:
        if not os.path.exists(opts.config):
            print >> sys.stderr, "Config file %s does not exist." % opts.config
            sys.exit(1)
        cp.read(opts.config)
    elif os.path.exists("/etc/prodview.conf"):
        cp.read("/etc/prodview.conf")

    if not opts.pool and cp.has_option("htcondor", "pool"):
        opts.pool = cp.get("htcondor", "pool")
    if not opts.output and cp.has_option("totalview", "basedir"):
        opts.output = cp.get("totalview", "basedir")
    opts.analysisview = cp.get("analysisview", "basedir")
    opts.prodview = cp.get("prodview", "basedir")
    opts.analysiscrab2view = cp.get("analysiscrab2view", "basedir")
    opts.scheddview = cp.get("scheddview", "basedir")
    opts.factoryview = cp.get("factoryview", "basedir")

    return opts, args


def getFromURL(url):
    """Get content from URL"""
    try:
        req = urllib2.Request(url)
        opener = urllib2.build_opener()
        f = opener.open(req)
        return f.read()
    except urllib2.URLError as er:
        print er
        return None


def updateRrd(fname, line):
    """ TODO: write it... """
    try:
        rrdtool.update(fname, line)
    except rrdtool.error as e:
        print e
        print fname
        print line


def queryFactory(coll, output):
    """TODO: write it """
    try:
        entries = coll.query(htcondor.AdTypes.Any, 'MyType=?="glidefactory" && GLIDEIN_CMSSite isnt undefined',
                             ['GLIDEIN_CMSSite', 'GLIDEIN_MaxMemMBs', 'GLIDEIN_Max_Walltime'])
    except IOError as er:
        print 'Failed to query factory. Error: %s' % er
        return
    for entry in entries:
        # So far it requires to -30minutes from Walltime request. TODO
        if 'GLIDEIN_MaxMemMBs' not in entry:
            entry['GLIDEIN_MaxMemMBs'] = 0
        if 'GLIDEIN_Max_Walltime' not in entry:
            entry['GLIDEIN_Max_Walltime'] = 0
        dataAppend = {'MaxMemMB': entry['GLIDEIN_MaxMemMBs'], 'MaxWallTime': int(entry['GLIDEIN_Max_Walltime']/60)}
        if entry['GLIDEIN_CMSSite'] not in output:
            output[entry['GLIDEIN_CMSSite']] = []
        inDict = False
        for item in output[entry['GLIDEIN_CMSSite']]:
            if cmp(item, dataAppend) == 0:
                inDict = True
        if not inDict:
            output[entry['GLIDEIN_CMSSite']].append(dataAppend)


def summarizeSchedds(scheddsInfo, scheddAds):
    """ TODO: write it. """
    for ad in scheddAds:
        # ['Name', 'CMSGWMS_Type', 'Machine', 'TotalRunningJobs', 'TotalIdleJobs', 'TotalHeldJobs', 'MaxJobsRunning']
        name = ad['Name'].replace("@", "-").replace(".", "-")
        scheddsInfo[name] = {}
        scheddsInfo[name]['FileName'] = name
        scheddsInfo[name]['CMSGWMS_Type'] = ad['CMSGWMS_Type'] if 'CMSGWMS_Type' in ad else 'CRAB2'
        keys = ['Name', 'Machine', 'TotalRunningJobs', 'TotalIdleJobs', 'TotalHeldJobs', 'MaxJobsRunning']
        for key in keys:
            scheddsInfo[name][key] = ad[key]
        scheddsInfo[name]['PercentageUse'] = 0 if ad['TotalRunningJobs'] == 0 else int((ad['TotalRunningJobs']*100)/ad['MaxJobsRunning'])
        scheddStatus = "UNKNOWN"
        try:
            statusExpr = classad.ExprTree('ifThenElse(IsOK is undefined, "UNKNOWN", ifThenElse(IsOK,"OK", ifThenElse(IsCritical, "CRITICAL", "WARNING")))')
            scheddStatus = statusExpr.eval(ad)
        except:
            print 'Strange. wrong expression...', ad
            continue
        scheddsInfo[name]['Status'] = scheddStatus


def pilotUsageInfo(coll, pilotUsage):
    """ TODO """
    pilots = []
    try:
        pilots = coll.query(htcondor.AdTypes.Any, 'GLIDEIN_CMSSite isnt undefined && SlotType isnt undefined',
                            ['PartitionableSlot', 'GLIDEIN_CMSSite', 'TotalSlotCpus', 'Cpus', 'SlotType', 'State'])
    except IOError as er:
        print 'Got IOError %s' % er
        return
    for item in pilots:
        if 'PartitionableSlot' in item:
            # Means we have partitionable slot and some info about it
            # and we don`t care about state as in Static
            slotInfo = pilotUsage.setdefault(item['GLIDEIN_CMSSite'], {}).setdefault(item['SlotType'], {'CpusUse': 0, 'CpusFree': 0})
            slotInfo['CpusFree'] += int(item['Cpus'])
            slotInfo['CpusUse'] += int(item['TotalSlotCpus'] - item['Cpus'])
        elif item['SlotType'] == 'Static':
            slotInfo = pilotUsage.setdefault(item['GLIDEIN_CMSSite'], {}).setdefault(item['SlotType'], {'CpusUse': 0, 'CpusFree': 0})
            if item['State'] == 'Claimed':
                slotInfo['CpusUse'] += 1
            elif item['State'] == 'Unclaimed':
                slotInfo['CpusUse'] += 1
    # summarize
    pilotUsage['Summary'] = {}
    for item, itemDict in pilotUsage.items():
        if item == 'Summary':
            continue
        for slot, slotDict in itemDict.items():
            out = pilotUsage.setdefault('Summary', {}).setdefault(slot, {'CpusUse': 0, 'CpusFree': 0})
            out['CpusUse'] += slotDict['CpusUse']
            out['CpusFree'] += slotDict['CpusFree']


def parseConfigXML(entries, output, factoryName, entryMappings):
    """ TODO doc """
    for entry in entries:
        entryName = entry.get('name')
        attr = entry.find('attributes')
        ettr = entry.find('descript')
        siteName = attr.get('GLIDEIN_CMSSite')
        maxHeld = ettr.get('DefaultPerFrontendMaxHeld')
        maxIdle = ettr.get('DefaultPerFrontendMaxIdle')
        if siteName and entryName and maxHeld and maxIdle:
            try:
                maxHeld = int(maxHeld)
                maxIdle = int(maxIdle)
            except:
                print 'Failed to parse value to int %s or %s' % (maxHeld, maxIdle)
                continue
            if entryName not in entryMappings:
                entryMappings[entryName] = siteName
            siteInfo = output.setdefault(siteName, {})
            entryInfo = siteInfo.setdefault(entryName, {})
            factoryInfo = entryInfo.setdefault(factoryName, {})
            factoryInfo['maxIdle'] = maxIdle
            factoryInfo['maxHeld'] = maxHeld


def appendtoOutput(output, siteName, entry, factory, held, idle, run, err=None, warning=None):
    """ TODO doc """
    if siteName:
        mapped = output.setdefault(siteName, {}).setdefault(entry, {}).setdefault(factory, {})
        mapped['nowHeld'] = int(float(held))
        mapped['nowIdle'] = int(float(idle))
        mapped['nowRunn'] = int(float(run))
        if err:
            errors = mapped.setdefault('Error', [])
            errors.append(err)
        if warning:
            warnings = mapped.setdefault('Warning', [])
            warnings.append(warning)


def parseRRDsData(entries, output, factoryName, entryMappings):
    """TODO doc """
    for entry in entries:
        entryName = entry.get('name')
        frontends = entry.find('frontends')
        foundCMSpilot = False
        foundPeriod = False
        previousEntry = None
        previousSiteName = None
        if len(frontends) == 0:
            foundCMSpilot = False
            if entryName in entryMappings:
                previousSiteName = entryMappings[entryName]
                previousEntry = entryName
            err = 'This entry does not have any pool defined. Check it with factory ops.'
            appendtoOutput(output, previousSiteName, previousEntry, factoryName, 0, 0, 0, err)
            continue
        for frontend in frontends:
            frontendName = frontend.get('name')
            if entryName in entryMappings:
                previousSiteName = entryMappings[entryName]
                previousEntry = entryName
            if frontendName not in ['frontend_CMSG-v1_0_cmspilot', 'frontend_CMS_T0-Frontend_cmspilot']:
                continue
            foundCMSpilot = True
            periods = frontend.find('periods')
            for period in periods:
                pname = period.get('name')
                if int(pname) != 7200:
                    continue
                foundPeriod = True
                nowHeld = period.get('StatusHeld')
                nowIdle = period.get('StatusIdle')
                nowRunn = period.get('StatusRunning')
                if not nowHeld and not nowIdle and not nowRunn:
                    warning = 'There is no data for last 2h about running/idle/held. Maybe no one is requesting?'
                    appendtoOutput(output, previousSiteName, previousEntry, factoryName, 0, 0, 0, None, warning)
                    continue
                appendtoOutput(output, previousSiteName, previousEntry, factoryName, nowHeld, nowIdle, nowRunn)
        if not foundPeriod and previousEntry and previousSiteName:
            error = 'There is no data for last 2h about running/idle/held. Maybe no one is requesting?'
            appendtoOutput(output, previousSiteName, previousEntry, factoryName, 0, 0, 0, error)
        if not foundCMSpilot and previousEntry and previousSiteName:
            error = 'This factory or frontend is not requesting pilots for this entry. Or entry is in downtime. Check it with factory ops.'
            appendtoOutput(output, previousSiteName, previousEntry, factoryName, 0, 0, 0, error)


def writeScheddInfo(basedir, scheddsInfo, factInfo):
    """ TODO doc """
    now = int(time.time())
    scheddsInfo['Summary'] = {}
    scheddsInfo['Summary']['UpdateTime'] = now
    dropObj(scheddsInfo, basedir, 'summary.json')
    for scheddName, scheddDict in scheddsInfo.items():
        if 'Name' not in scheddDict:
            continue
        requestDir = os.path.join(basedir, scheddName)
        if not os.path.exists(requestDir):
            os.makedirs(requestDir)
        fname = str(os.path.join(requestDir, "request.rrd"))
        if not os.path.exists(fname):
            rrdtool.create(fname,
                           "--step", "180",
                           "DS:Running:GAUGE:360:U:U",
                           "DS:Idle:GAUGE:360:U:U",
                           "RRA:AVERAGE:0.5:1:1000",
                           "RRA:AVERAGE:0.5:20:2000",)
        updateRrd(fname, "%d:%d:%d" % (GSTARTUP, scheddDict["TotalRunningJobs"], scheddDict["TotalIdleJobs"]))
    dropObj(factInfo, basedir, 'totals.json')
    return


def loadPoolData(totals, sites, basedir, name):
    """TODO doc"""
    totals[name] = {}
    sites[name] = {}
    fname = os.path.join(basedir, 'totals.json')
    try:
        totalsSummary = json.load(open(fname))
        totals[name] = totalsSummary
    except:
        print 'Got Error loading file %s' % fname
    fname = os.path.join(basedir, 'site_summary.json')
    try:
        sitesSummary = json.load(open(fname))
        sites[name] = sitesSummary
    except:
        print 'Got Error loading file %s' % fname
        return False
    return True


def writeToVar(out, entryInfo):
    """ TODO doc """
    out['Summary']['Held'] += entryInfo['nowHeld']
    out['Summary']['Run'] += entryInfo['nowRunn']
    out['Summary']['Idle'] += entryInfo['nowIdle']
    out['Summary']['MIdle'] += entryInfo['maxIdle']
    out['Summary']['MHeld'] += entryInfo['maxHeld']
    out['Summary']['Errors'] += 0 if 'Error' not in entryInfo else len(entryInfo['Error'])
    out['Summary']['Warnings'] += 0 if 'Warning' not in entryInfo else len(entryInfo['Warning'])


def summarize(totals, sites, xmlout, sitesCompare, pilotUsage):
    """ TODO doc """
    totalR = 0
    totalI = 0
    for dummytype, typeDict in totals.items():
        if 'Running' in typeDict.keys():
            totalR += typeDict['Running']
        if 'Idle' in typeDict.keys():
            totalI += typeDict['Idle']
    totals['Summary'] = {}
    totals['Summary']['Running'] = totalR
    totals['Summary']['Idle'] = totalI

    sites['Summary'] = {}
    for typeK, typeDict in sites.items():
        if not typeK == 'Summary':
            for site, siteDict in typeDict.items():
                if site and site != "Summary":
                    if site not in sites['Summary'].keys():
                        sites['Summary'][site] = {"Running": 0, "MatchingIdle": 0}
                    sites['Summary'][site]['Running'] += siteDict['Running']
                    sites['Summary'][site]['MatchingIdle'] += siteDict['MatchingIdle']
                    sites['Summary'][site][type] = siteDict
                    if site in pilotUsage:
                        sites['Summary'][site]['PilotUsage'] = pilotUsage[site]

    # Double check with what maximum was
    for site, siteDict in sites['Summary'].items():
        if site in sitesCompare and 'MaxWasRunning' in sitesCompare[site]:
            if siteDict['Running'] > sitesCompare[site]['MaxWasRunning']:
                sites['Summary'][site]['MaxWasRunning'] = siteDict['Running']
            else:
                sites['Summary'][site]['MaxWasRunning'] = sitesCompare[site]['MaxWasRunning']
        else:
            sites['Summary'][site]['MaxWasRunning'] = siteDict['Running']

    xmlout['Summary'] = {'Held': 0, 'Idle': 0, 'Run': 0, 'MHeld': 0, 'MIdle': 0, 'Errors': 0, 'Warnings': 0}
    for siteName, entriesDict in xmlout.items():
        if siteName not in ['Summary', 'Errors']:
            entriesDict["Summary"] = {'Held': 0, 'Idle': 0, 'Run': 0, 'MHeld': 0, 'MIdle': 0, 'Errors': 0, 'Warnings': 0}
            for entry, factoryDict in entriesDict.items():
                if entry in ['Summary']:
                    continue
                for dummyfactory, entryInfo in factoryDict.items():
                    # fix the mess in the factory!!!
                    # Until factory will move all their xmls to somewhere where you can track history
                    # who did changes than, we need to track this down.
                    # The problem is that same entry name points to different cms sites on diff factories
                    # And one entry is on, another is off. Who forgot to update ?!
                    messedUp = False
                    for key in ['nowHeld', 'nowRunn', 'nowIdle', 'maxIdle', 'maxHeld']:
                        if key not in entryInfo:
                            entryInfo[key] = 0
                            messedUp = True
                    if messedUp:
                        errors = entryInfo.setdefault('Error', [])
                        errors.append("Messed up! Please contact factory ops.")
                    elif entryInfo['nowHeld'] > 0 and entryInfo['nowHeld'] >= entryInfo['maxHeld']:
                        # Everything is held and there will not be any progress until it is cleaned
                        errors = entryInfo.setdefault('Error', [])
                        errors.append("Held pilots reached limit. Factory/Frontend will not request any new pilot to run until they are cleaned. \
                                      Contact Factory ops to know the held reason.")
                    elif entryInfo['nowIdle'] > 0 and entryInfo['nowIdle'] >= entryInfo['maxIdle'] and entryInfo['nowRunn'] == 0:
                        warnings = entryInfo.setdefault('Warning', [])
                        warnings.append("Idle pilots reached its limit and there is 0 running. Something is wrong.")
                    writeToVar(xmlout, entryInfo)
                    writeToVar(entriesDict, entryInfo)


def dropObj(obj, dirname, fname):
    """ TODO move from here """
    dirname = re.sub('[:]', '', dirname)
    fname = re.sub('[:]', '', fname)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    fnameTmp = os.path.join(dirname, fname + ".tmp")
    fname = os.path.join(dirname, fname)
    json.dump(obj, open(fnameTmp, "w"))
    os.rename(fnameTmp, fname)


def writeJson(totals, sites, xmlout, output, factoryout):
    """TODO: write doc"""
    now = int(time.time())
    totals['Summary']['UpdateTime'] = now
    dropObj(totals['Summary'], output, 'summary.json')
    dropObj(totals, output, 'totals.json')
    sitesT = sites.setdefault('Summary', {})
    dropObj(sitesT, output, 'site_summary.json')
    for site, siteDict in sitesT.items():
        siteDir = os.path.join(output, site)
        dropObj(siteDict, siteDir, "summary.json")
    dropObj(xmlout['Summary'], factoryout, 'summary.json')
    for site, siteDict in xmlout.items():
        if site in ['Errors', 'Summary']:
            continue
        siteDir = os.path.join(factoryout, site)
        dropObj(siteDict, siteDir, 'summary.json')
    dropObj(xmlout, factoryout, 'totals.json')


def writeRrds(totals, sites, xmlout, output, factoryout):
    """ TODO doc """
    running = totals['Summary']['Running']
    idle = totals['Summary']['Idle']
    fname = str(os.path.join(output, "summary.rrd"))
    if not os.path.exists(fname):
        rrdtool.create(fname,
                       "--step", "180",
                       "DS:Running:GAUGE:360:U:U",
                       "DS:Idle:GAUGE:360:U:U",
                       "RRA:AVERAGE:0.5:1:1000",
                       "RRA:AVERAGE:0.5:20:2000",)
    updateRrd(fname, "%d:%d:%d" % (GSTARTUP, running, idle))

    for site, siteDict in sites['Summary'].items():
        fname = str(os.path.join(output, "%s.rrd" % site))
        if not os.path.exists(fname):
            rrdtool.create(fname,
                           "--step", "180",
                           "DS:Running:GAUGE:360:U:U",
                           "DS:MatchingIdle:GAUGE:360:U:U",
                           "RRA:AVERAGE:0.5:1:1000",
                           "RRA:AVERAGE:0.5:20:2000",)
        updateRrd(fname, "%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MatchingIdle"]))
        fname = str(os.path.join(output, "%s-UTIL.rrd" % site))
        if not os.path.exists(fname):
            rrdtool.create(fname,
                           "--step", "180",
                           "DS:Running:GAUGE:360:U:U",
                           "DS:MaxRunning:GAUGE:360:U:U",
                           "RRA:AVERAGE:0.5:1:1000",
                           "RRA:AVERAGE:0.5:20:2000",)
        updateRrd(fname, "%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MaxWasRunning"]))
        if 'PilotUsage' in siteDict:
            partR = 0 if 'Partitionable' not in siteDict['PilotUsage'] else siteDict['PilotUsage']['Partitionable']['CpusUse']
            partI = 0 if 'Partitionable' not in siteDict['PilotUsage'] else siteDict['PilotUsage']['Partitionable']['CpusFree']
            statR = 0 if 'Static' not in siteDict['PilotUsage'] else siteDict['PilotUsage']['Static']['CpusUse']
            statI = 0 if 'Static' not in siteDict['PilotUsage'] else siteDict['PilotUsage']['Static']['CpusFree']
            fname = str(os.path.join(output, "%s-USAGE.rrd" % site))
            if not os.path.exists(fname):
                rrdtool.create(fname,
                               "--step", "180",
                               "DS:PartRunning:GAUGE:360:U:U",
                               "DS:PartIdle:GAUGE:360:U:U",
                               "DS:StatRunning:GAUGE:360:U:U",
                               "DS:StatIdle:GAUGE:360:U:U",
                               "RRA:AVERAGE:0.5:1:1000",
                               "RRA:AVERAGE:0.5:20:2000",)
            updateRrd(fname, "%d:%d:%d:%d:%d" % (GSTARTUP, partR, partI, statR, statI))

    # Create fake empty.rrd for sites which have no data.
    fname = str(os.path.join(output, "empty.rrd"))
    if not os.path.exists(fname):
        rrdtool.create(fname,
                       "--step", "180",
                       "DS:Running:GAUGE:360:U:U",
                       "DS:MatchingIdle:GAUGE:360:U:U",
                       "DS:MaxRunning:GAUGE:360:U:U",
                       "RRA:AVERAGE:0.5:1:1000",
                       "RRA:AVERAGE:0.5:20:2000",)
        updateRrd(fname, "%d:0:0:0" % GSTARTUP)

    fname = str(os.path.join(factoryout, 'summary.rrd'))
    summary = xmlout['Summary']
    if not os.path.exists(fname):
        rrdtool.create(fname,
                       "--step", "180",
                       "DS:Running:GAUGE:360:U:U",
                       "DS:Idle:GAUGE:360:U:U",
                       "DS:Held:GAUGE:360:U:U",
                       "DS:MaxIdle:GAUGE:360:U:U",
                       "DS:MaxHeld:GAUGE:360:U:U",
                       "RRA:AVERAGE:0.5:1:1000",
                       "RRA:AVERAGE:0.5:20:2000",)
    updateRrd(fname, "%d:%d:%d:%d:%d:%d" % (GSTARTUP, summary['Run'], summary['Idle'], summary['Held'], summary['MIdle'], summary['MHeld']))
    for site, siteDict in xmlout.items():
        if site in ['FactoryUrls', 'Errors', 'Summary']:
            continue
        for entry, entryDict in siteDict.items():
            if entry == 'Summary':
                fname = str(os.path.join(factoryout, '%s.rrd' % site))
                if not os.path.exists(fname):
                    rrdtool.create(fname,
                                   "--step", "180",
                                   "DS:Running:GAUGE:360:U:U",
                                   "DS:Idle:GAUGE:360:U:U",
                                   "DS:Held:GAUGE:360:U:U",
                                   "DS:MaxIdle:GAUGE:360:U:U",
                                   "DS:MaxHeld:GAUGE:360:U:U",
                                   "RRA:AVERAGE:0.5:1:1000",
                                   "RRA:AVERAGE:0.5:20:2000",)
                updateRrd(fname, "%d:%d:%d:%d:%d:%d" % (GSTARTUP, entryDict['Run'], entryDict['Idle'],
                                                        entryDict['Held'], entryDict['MIdle'], entryDict['MHeld']))
                continue
            else:
                subsiteDir = os.path.join(factoryout, site)
                if not os.path.exists(subsiteDir):
                    os.makedirs(subsiteDir)
                for factory, factoryInfo in entryDict.items():
                    newName = str(re.sub('[ ]', '', factory.lower()) + (re.sub('[ ]', '', entry)))
                    fname = os.path.join(subsiteDir, '%s.rrd' % newName)
                    if not os.path.exists(fname):
                        rrdtool.create(fname,
                                       "--step", "180",
                                       "DS:Running:GAUGE:360:U:U",
                                       "DS:Idle:GAUGE:360:U:U",
                                       "DS:Held:GAUGE:360:U:U",
                                       "DS:MaxIdle:GAUGE:360:U:U",
                                       "DS:MaxHeld:GAUGE:360:U:U",
                                       "RRA:AVERAGE:0.5:1:1000",
                                       "RRA:AVERAGE:0.5:20:2000",)
                    updateRrd(fname, "%d:%d:%d:%d:%d:%d" % (GSTARTUP, factoryInfo['nowRunn'], factoryInfo['nowIdle'],
                                                            factoryInfo['nowHeld'], factoryInfo['maxIdle'], factoryInfo['maxHeld']))


def main():
    """ Main function """
    opts, dummyargs = parseArgs()

    if opts.pool:
        coll = htcondor.Collector(opts.pool)
    else:
        coll = htcondor.Collector()

    # Has to be moved below
    factOut = {}  # Used from condor
    xmlOut = {}  # Used from parsing xmls
    entryMappings = {}  # Used for entries mapping from factory xmls
    # Move this list to configuration
    for factory in ['gfactory-1.t2.ucsd.edu', 'cmsgwms-factory.fnal.gov', 'glidein.grid.iu.edu', 'vocms0305.cern.ch']:
        print 'Query %s factory' % factory
        collF = htcondor.Collector(factory)
        queryFactory(collF, factOut)
    # Get schedulers information
    scheddsInfo = {}
    scheddAds = []
    try:
        scheddAds = coll.query(htcondor.AdTypes.Schedd, 'True', ['Name', 'CMSGWMS_Type', 'Machine', 'TotalRunningJobs', 'TotalIdleJobs',
                                                                 'TotalHeldJobs', 'MaxJobsRunning', 'IsOK', 'isWarning', 'isCritical'])
    except IOError as er:
        print 'Got IOError %s' % er
    if scheddAds:
        summarizeSchedds(scheddsInfo, scheddAds)
    writeScheddInfo(opts.scheddview, scheddsInfo, factOut)

    pilotUsage = {}
    totals = {}
    sites = {}

    pilotUsageInfo(coll, pilotUsage)
    loadPoolData(totals, sites, opts.analysisview, "analysisview")
    loadPoolData(totals, sites, opts.prodview, "prodview")
    loadPoolData(totals, sites, opts.analysiscrab2view, "analysiscrab2view")

    maxResources = {}
    maxTotals = {}
    i = 0
    while i < 5:
        success = loadPoolData(maxTotals, maxResources, opts.output, "totalview")
        if success:
            break
        print 'Failed to load site data for resource utilization'
        time.sleep(1)
        i += 1
    # Move this list to configuration also
    urls = [{"FNAL Factory": "http://cmsgwms-factory.fnal.gov:8319/factory/monitor/"},
            {"GOC Factory": "http://glidein.grid.iu.edu/factory/monitor/"},
            {"UCSD Factory": "http://gfactory-1.t2.ucsd.edu/factory/monitor/"},
            {"CERN Factory": "http://vocms0305.cern.ch/monitor/"}]
    appends = ['descript.xml', 'rrd_Status_Attributes.xml']
    errors = xmlOut.setdefault("Errors", [])
    for appendId in [0, 1]:
        for urlVal in urls:
            factoryName, url = urlVal.items()[0]
            urlD = url + appends[appendId]
            factoryXml = getFromURL(urlD)
            if not factoryXml:
                errors.append("Failed to parse %s info from %s url" % (factoryName, urlD))
                continue
            root = ET.fromstring(factoryXml)
            entries = root.find('entries')
            if appendId == 0:
                parseConfigXML(entries, xmlOut, factoryName, entryMappings)
            else:
                parseRRDsData(entries, xmlOut, factoryName, entryMappings)
    summarize(totals, sites, xmlOut, maxResources['totalview'], pilotUsage)
    xmlOut["Summary"]["FactoryUrls"] = {}
    for urlVal in urls:
        factoryName, url = urlVal.items()[0]
        xmlOut["Summary"]["FactoryUrls"][factoryName] = url
    if opts.output:
        writeJson(totals, sites, xmlOut, opts.output, opts.factoryview)
        writeRrds(totals, sites, xmlOut, opts.output, opts.factoryview)

if __name__ == "__main__":
    main()
