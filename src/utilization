#!/usr/bin/python
"""
   This script reviews totalview site-summary json file to get
   list of all sites. For all sites it goes through all possible views
     prodview
     analysisview
     analysiscrab2view
     totalview
   and gets sites AVERAGE running values. These values after that are written
   to that specific view
"""

import os
import json
import rrdtool
import datetime
import rrdtool
from functions import parseArgs
from functions import dropObj


def getAverageLastN(inp, keys):
    """Returns average int for len of keys"""
    suma = 0
    for key in keys:
        if key in inp:
            suma += inp[key]
    try:
        val1= int(suma/len(keys))
        return val1
    except ZeroDivisionError as er:
        return 0


def analyseProdRrds(saveDir, totalviewDir, timespan, naming):
    """Get all list of sites, and average value for last <timespan> days"""
    fname = os.path.join(totalviewDir, 'site_summary.json')
    possibleDates = []
    output = {}
    originNaming = []
    for siteName in json.load(open(fname)).keys():
        now = datetime.datetime.now()
        then = now - datetime.timedelta(days=int(timespan))
        # Also I don`t need hour, mins, seconds, microseconds
        then = then - datetime.timedelta(hours=then.hour, minutes=then.minute, seconds=then.second, microseconds=then.microsecond)
        output[siteName] = {}
        output[siteName]['per_day_values'] = {}
        try:
            fname = os.path.join(saveDir, '%s.rrd' % siteName)
            values = rrdtool.fetch(str(fname), 'AVERAGE', '-s', then.strftime("%s"), '-e', now.strftime("%s"))
        except:
            print 'Seems this site is not running production %s' % siteName
            continue
        # 0 - will give start, end, interval
        #  1 - will give keys, in this case Running, Matching idle
        # 2 is a list of values. Some might have None. if not integer skip that value
        maxV = 0
        n = 0  # it will count number of hours
        then = now - datetime.timedelta(days=int(timespan))
        possibleDates = []
        i = 0
        print originNaming, naming
        originNaming = list(naming)
        for item in values[1]:
            if item == originNaming[0]:
                originNaming.append(i)
            i += 1
        if len(originNaming) == len(naming):
            print 'Something wrong. Should not happen', siteName, originNaming, naming, fname
        for item in values[2]:
            try:
                value = int(item[originNaming[2]])
            except:
                value = 0
            if n <= 23:
                n += 1
                if value > maxV:
                    maxV = value
            else:
                keyName = int(str(then.year) + str('%02d' % then.month) + str('%02d' % then.day))
                possibleDates.append(keyName)
                output[siteName]['per_day_values'][keyName] = maxV
                print siteName, then.year, then.month, then.day, maxV
                then = then + datetime.timedelta(days=1)
                n = 1
                maxV = value
                # RRD has a bug and does not stop if values are NaN.
                # Also there is no point to analyse todays values as they will not be written to output
            if len(output[siteName]['per_day_values']) == int(timespan):
                print 'This site has everything NaN. Break the loop'
                break
    dailyStatistics(possibleDates, output, saveDir, naming)


def dailyStatistics(possibleDates, output, saveDir, naming):
    """Before droping object, make more statistics for whole month.
       TODO: in configuration might be specified more or less days. Use from config."""
    # Before droping make more statistics:
    possibleDates = sorted(list(set(possibleDates)))  # Keep only unique
    # Values for calculating last N possible values
    keysTo = {"onemonth": 31, "threeweeks": 21, "twoweeks": 14, "oneweek": 7, "sixdays": 6,
              "fivedays": 5, "fourdays": 4, "threedays": 3, "twodays": 2, "oneday": 1}
    for site in output.keys():
        for key in keysTo:
            value = getAverageLastN(output[site]['per_day_values'], possibleDates[-keysTo[key]:])
            output[site][key] = value
    print output
    dropObj(output, saveDir, '%s.json' % naming[1].lower())


def main():
    """Main function"""
    opts, dummyargs = parseArgs()
    if opts.utilization and opts.totalview:
        for itemNames in [['Running', 'maxused'], ['CpusUse', 'maxusedcpus']]:
            if opts.prodview:
                analyseProdRrds(opts.prodview, opts.totalview, opts.utilization, itemNames)
            if opts.analysisview:
                analyseProdRrds(opts.analysisview, opts.totalview, opts.utilization, itemNames)
            # Also do for totalview
            analyseProdRrds(opts.totalview, opts.totalview, opts.utilization, itemNames)

if __name__ == "__main__":
    main()
